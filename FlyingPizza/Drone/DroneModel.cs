using System;
using System.Linq;
using System.Net.NetworkInformation;
using System.Text.Json;
using System.Threading;
using FlyingPizza.Services;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using Xunit.Sdk;


namespace FlyingPizza.Drone
{
    // An object representing the subset of attributes that will describe a drone in the database's Fleet page
    public sealed record DroneRecord(int BadgeNumber, Point Location, string State)
    {
        // Creates a DroneRecord from the given DroneModel
        public static DroneRecord From(DroneModel model)
        {
            return new(model.BadgeNumber, model.Location, model.Status.ToString());
        }

        public static DroneRecord Deserialize(JsonElement elem)
        {
            return new DroneRecord(int.Parse(elem.GetProperty("badgeNumber").ToString())
                ,new Point(double.Parse(elem.GetProperty("location").GetProperty("x").ToString()),double.Parse(elem.GetProperty("location").GetProperty("y").ToString()))
                ,elem.GetProperty("state").ToString());
        }
    }
    public class DroneModel : ComponentBase
    {
        // The elapsed time between a drone getting to the next Point in a route
        private const int DroneUpdateInterval = 2000;

        // The prefix to every url query on the fleet of drones
        private const string FleetPage = "http://localhost:8080/Fleet/";
        
        // The unique ID of this drone which is stored in the database
        public int BadgeNumber { get; }
        
        // The current position of the drone
        public Point Location { get; set; } 

        // The desired position of the drone
        public Option<Order> Delivery { get; set; }

        // Current status of the drone
        public DroneStatus Status { get; set; }

        // The singleton REST service used for all drones
        private RestDbSvc RestSvc { get;}
        
        // The url to send commands to a drone
        private string Url { get; set; }
        
        
        // Constructor
        public DroneModel(int badgeNumber, Point location)
        {
            BadgeNumber = badgeNumber;
            Location = location;
            Status =  new DroneStatus(DroneState.Ready);
            Delivery = new Option<Order>();
            RestSvc = new RestDbSvc();
            RegisterDrone();
            // Todo: Get the Id back and assign it here
        }

        // Construct a DroneModel from the specified record
        public DroneModel From(DroneRecord record)
        {
            return new(record.BadgeNumber, record.Location);
        }
        
        // Post a new drone to the fleet
        private async Task RegisterDrone()
        {
            //Todo: This method should first check the database and make sure there is no drone with the same BadgeNumber. If there is, throw an exception, saying "This drone BadgeNumber already belongs to another drone. Otherwise, register the drone by Posting then Putting it in the DB
            
            var url = "http://localhost:8080/Fleet?keys={_id: 0, badgeNumber:1}&filter={badgeNumber:" + BadgeNumber + "}";
            var entries = await RestSvc.Get<JsonDocument>(url);
            if(entries.RootElement.GetArrayLength() < 1)
            {
                var response = await RestSvc.Post<DroneRecord>(FleetPage, DroneRecord.From(this));
                if (response.Headers.Location is not null) Url = response.Headers.Location.AbsoluteUri;
                else throw new NullException("Something went wrong here");
            }
            // Todo: use a GET to retrieve the Drone's _id generated by MongoDB
            var task = RestSvc.Put<DroneRecord>(Url, DroneRecord.From(this));
            Console.WriteLine(task + "");
        }

        // Return an array of Point records simulating a drone's delivery route
        public Point[] GetRoute()
        {
            if (!Delivery.HasValue)
            {
                throw new Exception("Why is there no value??");
            }

            var dest = Delivery.Value.Destination;
            if (Math.Abs(Location.X - dest.X) < Point.Tolerance 
                && Math.Abs(Location.Y - dest.Y) < Point.Tolerance)
            {
                throw new ArgumentException(
                    "Destination cannot be the same as the Delivery station!");
            }

            // Longitude distance to get to destination
            var xDistance = Location.X - dest.X;

            // Latitude distance to get to destination
            var yDistance = Location.Y - dest.Y;

            // # of steps should be the absolute value of the hypotenuse,
            // rounded up to the nearest integer
            var stepsCount = Math.Abs((int)Math.Ceiling(Math.Sqrt(
                xDistance * xDistance + yDistance * yDistance)));
            
            // The incremental change in latitude & longitude for each discrete
            // Point
            var xStep = Math.Abs(dest.X - Location.X) / stepsCount;
            var yStep = Math.Abs(dest.Y - Location.Y) / stepsCount;

            // The multiplier to ensure the direction of StepSize
            // increases for Destination X and Y > Home X and Y
            // decreases for Destination X and Y < Home X and Y
            var xDirection = dest.X > Location.X ? 1 : -1;
            var yDirection = dest.Y > Location.Y ? 1 : -1;
            
            Point[] route = new Point[stepsCount];

            for (var i = 0; i < stepsCount - 1; i++)
            {
                route[i] = new Point((i + 1) * xStep * xDirection,
                    (i + 1) * yStep * yDirection);
            }

            route[stepsCount - 1] = dest;
            return route;
        }

        // Dispatch a drone to deliver a pizza.
        public void DeliverOrder(Option<Order> customerOrder)
        {
            Delivery = customerOrder;
            var route = GetRoute();
            UpdateStatus(DroneState.Delivering);
            
            // Travel to Destination
            foreach (var point in route)
            {
                UpdateLocation(point, DroneUpdateInterval);
            }
            UpdateStatus(DroneState.Returning);
            
            // Travel back to Home
            foreach (var point in route.Reverse())
            {
                UpdateLocation(point, DroneUpdateInterval);
            }
            UpdateStatus(DroneState.Ready);
        }
        
        // Change the status of a drone and send update to database
        private void UpdateStatus(DroneState state)
        {
            Status = new DroneStatus(state);
            // Post a status update to the database.
            UpdateRest();
        }

        // Change the location of a drone and send update to database
        private void UpdateLocation(Point location, int sleepTime = 0)
        {
            Location = location;
            Console.WriteLine(this);
            Thread.Sleep(sleepTime);
            // Post a location update to the database.
            UpdateRest();
        }
        
        // send update to the database
        private void UpdateRest()
        {
            RestSvc.Put<DroneRecord>(FleetPage, DroneRecord.From(this));
        }
        
        // String for debugging purposes
        public override string ToString()
        {
            return $"badgeNumber:{BadgeNumber}\n" +
                   $"location:{Location}\n" +
                   $"Destination:{Delivery}\n" +
                   $"Status:{Status}";
        }
    }
    
}
