

So here is a file that outlines what you will need to do to access our database with your code. 

ssh -L 8080:localhost:8080 root@147.182.227.239

Pass: FlyingPizza1Here

This will bind your local 8080 port to the 8080 port on the server which talks
to the restheart server and also therefore the database. You will need to do this any time you want to use code that 
accesses the database in anyway as there is no other way into it. This is normally only used in development and on deployment 
would use the domain and some other certificate stuff but for now it works like that. 

Any code that would like to access the database will as a result just ask at the url 
"http://localhost:8080/collection_Name/objectID" in the url space of the restdb service request using the RestDbSvc class 
that is created. I have updated the headers to access our Db correctly using the information it needs. 

for example this will look like 

for getting a single object:
RestDbSvc.get("http://localhost:8080/collection_Name/objectID")

for getting all objects in a table:
RestDbSvc.get("http://localhost:8080/collection_Name/")

for getting all objects with a filter:
RestDbSvc.get("http://localhost:8080/collection_Name/objectID?filter={mongoQuery}")

for updating existing object:
RestDbSvc.put("http://localhost:8080/collection_Name/objectID", object)

for creating new object:
RestDbSvc.post("http://localhost:8080/collection_Name/", object)


If you would like to see into the mongo database as you make changes to it, which I find helpful for development you can use
the following command to do so: 

ssh -L 27018:localhost:27017 root@147.182.238.228

Then you can download an app called MongoDBCompass and look into a collection with this as your connection string
mongodb://localhost:27018/?readPreference=primary&appname=MongoDB%20Compass&directConnection=true&ssl=false


CREATING DROPLETS ON DIGITALOCEAN

you can make 2 droplets with the most basic settings on the same server line such as San francisco 3 or New York 1 in the 
same project. Make sure to tag each droplet with what it is so you dont forget cuz it will create headaches later. 




RESTHEART SET UP ON DROPLET

Here is, in order the list of commands you would need to set up a restheart server from scratch

	Update Ubuntu 

	sudo apt update

	sudo apt upgrade
	
	sudo reboot

Ssh back into the droplet and confirm that it is up. Next install java 17 like so

curl  -O https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz

tar -xvf jdk-17_linux-x64_bin.tar.gz

sudo mv jdk-17 /opt/jdk17

export JAVA_HOME=/opt/jdk17
export PATH=$PATH:$JAVA_HOME/bin

java --version

If the above install worked it will say you have java 17 installed. 







ACTUALLY PUTTING RESTHEART ON THE SERVER

next you will need to download onto your main computer the restheart.tar.gz from their website and upload it to the server
by using the command

scp restheart.tar.gz root@dropletIP:~/.

once it is on the server type this command into the server shell 

tar -xzf restheart.tar.gz && cd restheart

this unpacks the tar file and cds into the restheart server.





MONGO SERVER ON ITS OWN DROPLET

Perform the above basic updates to the droplet one is it is up. Then you will want to install mongo since it is necessary
for it to be running this is done by doing these commands in order 

curl -fsSL https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -

echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list

sudo apt update

sudo apt install mongodb-org

sudo systemctl start mongod.service

sudo systemctl status mongod

sudo systemctl enable mongod

The above code gets mongo, installs it, starts the mongo service, and then makes it a daemon so it will always run on start.

On digitalOcean this server will have its own internal ip address with the restheart server under Private IP will be 
something like 10.124.0.number and you will use this to let them communicate directly. Make sure they are hosted on the same
VPC which happens by default if you put them in the same Server Zone. Once this is done on the mongo server you will need to
edit the file to use this port

nano /etc/mongodb.conf 

In this file you will find the line that says 

bindIP: 127.0.0.1

edit this line to say bindIp: 127.0.0.1, 10.124.0.number whic represents this interal server address

Finally make a user (you can look up how to make users on linux) with a home directory that the restheart server will use to
access the database. Give it a password as well. Once this is done do a final reboot of the server and once you do you 
are now done with the mongo server for good. 




FINISHING WITH THE RESTHEART SERVER

Now that the mongo server is set up you need to make a changed to the Restheart files. Specifically the 
restheart/etc/default.properties file. From inside this file you will edit the line that says 

mongo-uri = mongodb://127.0.0.1

This should instead say 

mongo-uri = mongodb://RestheartUserOnMongoServer:Password@MongoDropletPrivateIP

Once you change this line save the file and you are ready to start the restheart server. 

Go to the restheart folder and enter the following command

java -jar restheart.jar etc/restheart.yml -e etc/default.properties &

This will set up the server and allow you to leave the process by typing ctrl+c and then you can ping the server externally
on port 8080 to see if it is working. If it is you are all done. 
